{"name":"Flame","tagline":"The PDO wrapper with comfortable API for placeholders","body":"Flame\r\n=====\r\n\r\n[![Build Status](https://travis-ci.org/nkt/flame.svg?branch=master)](https://travis-ci.org/nkt/flame)\r\n[![Coverage Status](https://img.shields.io/coveralls/nkt/flame.svg)](https://coveralls.io/r/nkt/flame?branch=master)\r\n\r\nThe PDO wrapper with comfortable API for placeholders\r\n\r\nIdea\r\n----\r\n\r\nWrite placeholders types directly in the query\r\n\r\nFor example:\r\n\r\n```sql\r\nSELECT * FROM goods g WHERE g.price BETWEEN f:minPrice AND f:maxPrice;\r\nSELECT * FROM users u WHERE u.username = s:username; -- :username also bind as string\r\nSELECT * FROM orders o WHERE o.id = i:id;\r\nSELECT * FROM users u WHERE u.registered >= d:date;\r\n```\r\n\r\nDifference between native PDO placeholders\r\n------------------------------------------\r\n\r\nUnlike PDO you can re-use the same placeholder as long as necessary.\r\nAlso you have to specifying the type of the placeholder just once.\r\n\r\n```php\r\n$users = $flame->prepare(\r\n    'SELECT * FROM users WHERE age >= i:age OR (registered < d:registered AND age = :age)'\r\n)->execute(['age' => $age]);\r\n```\r\n\r\nYou don't need cast every integer values, Flame do it for you.\r\n\r\n```php\r\n$stmt = $flame->prepare('SELECT * FROM users WHERE id = i:id)');\r\n$users = $stmt->execute(['id' => $_POST['id']]);\r\n```\r\n\r\nEvery query execution Flame tests value is `null` and if it is,\r\nchange placeholder type to `PDO::PARAM_NULL`.\r\n\r\n```php\r\n$stmt = $flame->prepare('INSERT INTO users VALUES(s:username, d:last_login))');\r\n$users = $stmt->execute(['username' => 'John Doe', 'last_login' => null]);\r\n```\r\n\r\nFlame add new types: date and time. You can bind this data as `DateTime`, `string` or `int`.\r\n\r\nPlaceholder types\r\n-----------------\r\n\r\n - **s**: string\r\n - **i**: integer\r\n - **f**: float\r\n - **b**: boolean\r\n - **n**: null\r\n - **l**: blob\r\n - **d**: datetime\r\n - **t**: time\r\n\r\n\r\nQuery builder\r\n=============\r\n\r\nFlame also provide powerful query builder. Connection provide base wrappers:\r\n\r\n - `Connection::select(string $column...)`\r\n - `Connection::update(string $table, array $columns)`\r\n - `Connection::insert(string $table, array $columns)`\r\n\r\nEvery sql statement provides by method with same name in `camelCase`.\r\n\r\nExamples:\r\n\r\n```php\r\n$posts = $db->prepare(\r\n    $db->select('p.id', 'p.title', 'p.content')\r\n       ->from('posts p')\r\n       ->join('post_tags pt', 'p.id', 'pt.post_id')\r\n       ->join('tags t', 't.id', 'pt.tag_id')\r\n       ->where(function ($e) {\r\n           $e->equal('t.name', ':tag');\r\n       })\r\n)->execute(['tag' => $tag]);\r\n\r\n$db->prepare($db->insert('users', [\r\n        'username'   => ':name',\r\n        'password'   => ':pass',\r\n        'registered' => 'd:now'\r\n    ]))->execute([\r\n        'name' => $name,\r\n        'pass' => $pass,\r\n        'now'  => new \\DateTime()\r\n   ]);\r\n```\r\n\r\nUsage\r\n-----\r\n\r\nFlame required php 5.4+ and PDO extension.\r\n\r\n`composer require nkt/flame:1.0-dev`\r\n\r\n```php\r\n<?php\r\n\r\nuse Flame\\Connection;\r\nuse Flame\\Grammar\\MysqlGrammar;\r\n\r\n$db = new Connection('mysql:dbname=hello_world', 'user', 'password', [], new MysqlGrammar());\r\n$db->prepare(...);\r\n```\r\n\r\nLicense\r\n-------\r\n\r\n[MIT](LICENSE)\r\n","google":"UA-37169681-3","note":"Don't delete this file! It's used internally to help with page regeneration."}